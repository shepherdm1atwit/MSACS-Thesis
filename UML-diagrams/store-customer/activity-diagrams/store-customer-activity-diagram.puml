@startuml Item
'"Item" class functionality
skinparam defaultTextAlignment center
start
partition "constructor(self, name, price)" {
  :Create Item object with name string and price float;
}
repeat :wait for method call;
  partition "~__eq__(self, other)" {
    if (other is instance of Item) then (yes)
      if (self name & price = other name & price) then (yes)
        :Return True;
      else (no)
        :Return False;
      endif
    else (no)
      :Return False;
    endif
  }
repeat while (object exists?) is (yes)
->no;
stop
@enduml

@startuml Store
'"Store" class functionality
skinparam defaultTextAlignment center
start
partition "constructor(self, name)" {
    :Create Store object with 
    name & empty Item list;
}
repeat :wait for method call;
  split
  partition "add_items(self, items)" {
    :Add all items from items 
    parameter to object items;
  }
  split again
  partition "has_item(self, item)" {
    if (item in items list) then (yes)
      :Return True;
    else (no)
      :Return False;
    endif
  }
  split again
  partition "print_items(self)" {
    :Print names of each item in items list;
  }
  end split
repeat while (object exists?) is (yes)
->no;
stop
@enduml

@startuml Customer
'"Customer" class functionality
skinparam defaultTextAlignment center
start
partition "constructor(self, name)" {
    :Create Customer object with 
    name & empty owned items list, 
    shopping list, and cart list;
}
repeat :wait for method call;
  split
  partition "add_to_shopping_list(self, items)" {
    :Add all items from items 
    not already in shopping list
    to shopping list;
  }
  split again
  partition "add_to_cart(self, item)" {
    :Add item to cart;
    :Print string stating this Customer 
    added this item to their cart;
  }
  split again
  partition "visit_store(self, store)" {
    :Empty cart;
    :Print string stating this 
    Customer visits this Store;
    :Add all items on shopping 
    list that store has to cart;
    :Remove items in cart from shopping list;
    :Add items in cart to owned items list;
    if (cart has items in it) then (yes)
      :Create trip results string stating 
      what this customer bought at the store;
    else (no)
      :Create trip results string stating 
      that this customer bought nothing 
      at this store;
    endif
    :Empty cart;
    :Print trip results string, value of
    self.get_status(), and "\n";
  }
  split again
  partition "get_status(self)" {
    if (shopping list has items in it) then (yes)
      :Status string states what items
      this customer still needs;
    else (no)
      :Status string states that customer
      doesn't need anything;
    endif
    if (owned items list has items in it) then (yes)
      :Append statement listing items this
      customer owns to status string;
    else (no)
      :Append statement that this customer 
      owns nothing to status string;
    endif
    :Return status string;
  }
  end split
repeat while (object exists?) is (yes)
->no;
stop

@enduml