Below is an instruction that describes a task. Write a response that appropriately completes the request.

### Instruction:
Generate complete and fully implemented Python code based on the following annotated PlantUML activity diagram including the import of all necessary libraries. Do not implement "main" functionality:

@startuml Item
'"Item" class functionality
skinparam defaultTextAlignment center
start
partition "constructor(self, name, price)" {
  :Create Item object with name string and price float;
}
repeat :wait for method call;
  partition "~__eq__(self, other)" {
    if (other is instance of Item) then (yes)
      if (self name & price = other name & price) then (yes)
        :Return True;
      else (no)
        :Return False;
      endif
    else (no)
      :Return False;
    endif
  }
repeat while (object exists?) is (yes)
->no;
stop
@enduml

@startuml Store
'"Store" class functionality
skinparam defaultTextAlignment center
start
partition "constructor(self, name)" {
    :Create Store object with 
    name & empty Item list;
}
repeat :wait for method call;
  split
  partition "add_items(self, items)" {
    :Add all items from items 
    parameter to object items;
  }
  split again
  partition "has_item(self, item)" {
    if (item in items list) then (yes)
      :Return True;
    else (no)
      :Return False;
    endif
  }
  split again
  partition "print_items(self)" {
    :Print names of each item in items list;
  }
  end split
repeat while (object exists?) is (yes)
->no;
stop
@enduml

@startuml Customer
'"Customer" class functionality
skinparam defaultTextAlignment center
start
partition "constructor(self, name)" {
    :Create Customer object with 
    name & empty owned items list, 
    shopping list, and cart list;
}
repeat :wait for method call;
  split
  partition "add_to_shopping_list(self, items)" {
    :Add all items from items 
    not already in shopping list
    to shopping list;
  }
  split again
  partition "add_to_cart(self, item)" {
    :Add item to cart;
    :Print string stating this Customer 
    added this item to their cart;
  }
  split again
  partition "visit_store(self, store)" {
    :Empty cart;
    :Print string stating this 
    Customer visits this Store;
    :Add all items on shopping 
    list that store has to cart;
    :Remove items in cart from shopping list;
    :Add items in cart to owned items list;
    if (cart has items in it) then (yes)
      :Create trip results string stating 
      what this customer bought at the store;
    else (no)
      :Create trip results string stating 
      that this customer bought nothing 
      at this store;
    endif
    :Empty cart;
    :Print trip results string, value of
    self.get_status(), and "\n";
  }
  split again
  partition "get_status(self)" {
    if (shopping list has items in it) then (yes)
      :Status string states what items
      this customer still needs;
    else (no)
      :Status string states that customer
      doesn't need anything;
    endif
    if (owned items list has items in it) then (yes)
      :Append statement listing items this
      customer owns to status string;
    else (no)
      :Append statement that this customer 
      owns nothing to status string;
    endif
    :Return status string;
  }
  end split
repeat while (object exists?) is (yes)
->no;
stop

@enduml


### Response:
```python
from typing import List

class Item:
    def __init__(self, name: str, price: float):
        """Creates an Item object with name string and price float"""
        self.name = name
        self.price = price

    def __str__(self):
        return f"{self.name}: ${self.price}"

    def __repr__(self):
        return f"<Item({self.name}, ${self.price})>"

    def __eq__(self, other):
        """Checks whether two Items are equal by comparing their attributes."""
        if isinstance(other, Item):
            return self.name == other.name and self.price == other.price
        else:
            return False


class Store:
    def __init__(self, name: str):
        """Creates a Store object with name and empty Item list"""
        self.name = name
        self.items = []

    def add_items(self, items: List[Item]):
        """Adds all items from items parameter to object items"""
        self.items += items

    def has_item(self, item: Item) -> bool:
        """Checks if item is in objects items list"""
        return item in self.items

    def print_items(self):
        """Prints names of each item in objects items list"""
        for i in self.items:
            print(i)


class Customer:
    def __init__(self, name: str):
        """Creates a Customer object with name, empty owned items list, shopping list, and cart list"""
        self.name = name
        self.owned_items = []
        self.shopping_list = set()
        self.cart = {}

    def add_to_shopping_list(self, items: List[Item]):
        """Adds all items from items not already in shopping list to shopping list"""
        new_items = [x for x in items if x not in self.shopping_list]
        self.shopping_list |= set(new_items)

    def add_to_cart(self, item: Item):
        """Adds item to cart and prints message stating this Customer added this item to their cart"""
        self.cart[item] = item
        print(f"{self.name} added {item} to their cart.")

    def visit_store(self, store: Store):
        """Empties cart, prints message stating this Customer visits this Store, adds items on shopping list that store has to cart,
           removes items in cart from shopping list, adds items in cart to owned items list, creates trip results string, prints trip 
           results string, value of get_status() and '\n'. Empty cart afterward.
        """
        self.cart = {}
        print(f"{self.name} visited {store.name}.")
        available_items = [x for x in self.shopping_list if store.has_item(x)]
        for item in available_items:
            self.cart[item] = item
            self.shopping_list.remove(item)
        purchased_items = [(k, v) for k,v in self.cart.items()]
        self.owned_items += purchased_items
        if len(purchased_items) > 0:
            purchase_string = ", ".join([str(x) for x in purchased_items])
            print(f"{self.name} purchased {purchase_string}")
        else:
            print("Nothing was purchased.")
        self.cart = {}
        print(self.get_status())
        print("\n")

    def get_status(self) -> str:
        """Gets status string about what this customer still needs or owns"""
        needed_items = ", ".join([str(x) for x in self.shopping_list])
        owned_items = ", ".join([str(x) for x in self.owned_items])
        status = ""
        if len(needed_items) != 0:
            status += f"\nItems {self.name} still needs:\n{needed_items}\n"
        if len(owned_items) != 0:
            status += f"Items {self.name} owns:\n{owned_items}\n"
        return status
```

Note: This implementation assumes that `Store` and `Customer` have access to `Item`. If they do not, you can remove the imports and replace `List[Item]` with `list` and `set()` with `{}`, respectively. Additionally, `__str__` and `__repr__` methods were also included for readability purposes but are not strictly required for the given diagrams. 