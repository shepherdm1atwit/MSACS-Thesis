Below is an instruction that describes a task. Write a response that appropriately completes the request.

### Instruction:
Generate complete and fully implemented Python code based on the following annotated PlantUML activity diagram including the import of all necessary libraries:

@startuml Item
'"Item" class functionality
skinparam defaultTextAlignment center
start
partition "constructor(self, name, price)" {
  :Create Item object with name string and price float;
}
repeat :wait for method call;
  partition "~__eq__(self, other)" {
    if (other is instance of Item) then (yes)
      if (self name & price = other name & price) then (yes)
        :Return True;
      else (no)
        :Return False;
      endif
    else (no)
      :Return False;
    endif
  }
repeat while (object exists?) is (yes)
->no;
stop
@enduml

@startuml Store
'"Store" class functionality
skinparam defaultTextAlignment center
start
partition "constructor(self, name)" {
    :Create Store object with 
    name & empty Item list;
}
repeat :wait for method call;
  split
  partition "add_items(self, items)" {
    :Add all items from items 
    parameter to object items;
  }
  split again
  partition "has_item(self, item)" {
    if (item in items list) then (yes)
      :Return True;
    else (no)
      :Return False;
    endif
  }
  split again
  partition "print_items(self)" {
    :Print names of each item in items list;
  }
  end split
repeat while (object exists?) is (yes)
->no;
stop
@enduml

@startuml Customer
'"Customer" class functionality
skinparam defaultTextAlignment center
start
partition "constructor(self, name)" {
    :Create Customer object with 
    name & empty owned items list, 
    shopping list, and cart list;
}
repeat :wait for method call;
  split
  partition "add_to_shopping_list(self, items)" {
    :Add all items from items 
    not already in shopping list
    to shopping list;
  }
  split again
  partition "add_to_cart(self, item)" {
    :Add item to cart;
    :Print string stating this Customer 
    added this item to their cart;
  }
  split again
  partition "visit_store(self, store)" {
    :Empty cart;
    :Print string stating this 
    Customer visits this Store;
    :Add all items on shopping 
    list that store has to cart;
    :Remove items in cart from shopping list;
    :Add items in cart to owned items list;
    if (cart has items in it) then (yes)
      :Create trip results string stating 
      what this customer bought at the store;
    else (no)
      :Create trip results string stating 
      that this customer bought nothing 
      at this store;
    endif
    :Empty cart;
    :Print trip results string, value of
    self.get_status(), and "\n";
  }
  split again
  partition "get_status(self)" {
    if (shopping list has items in it) then (yes)
      :Status string states what items
      this customer still needs;
    else (no)
      :Status string states that customer
      doesn't need anything;
    endif
    if (owned items list has items in it) then (yes)
      :Append statement listing items this
      customer owns to status string;
    else (no)
      :Append statement that this customer 
      owns nothing to status string;
    endif
    :Return status string;
  }
  end split
repeat while (object exists?) is (yes)
->no;
stop

@enduml

### Response:

```python
from typing import List
import random

class Item:
    def __init__(self, name: str, price: float):
        self.name = name
        self.price = price
    
    def __eq__(self, other):
        return self.name == other.name and self.price == other.price

class Store:
    def __init__(self, name: str):
        self.name = name
        self.items = []
    
    def add_items(self, items: List[Item]):
        for item in items:
            self.items.append(item)
    
    def has_item(self, item: Item):
        return item in self.items
    
    def print_items(self):
        for item in self.items:
            print(f"{item.name}: ${item.price}")

class Customer:
    def __init__(self, name: str):
        self.name = name
        self.owned_items = []
        self.shopping_list = []
        self.cart = []
    
    def add_to_shopping_list(self, items: List[Item]):
        for item in items:
            if item not in self.shopping_list:
                self.shopping_list.append(item)
    
    def add_to_cart(self, item: Item):
        self.cart.append(item)
        print(f"{self.name} adds {item.name} to their cart.")
    
    def visit_store(self, store: Store):
        self.empty_cart()
        print(f"{self.name} visits {store.name}.")
        
        for item in self.shopping_list:
            if store.has_item(item):
                self.add_to_cart(item)
        
        self.remove_items_in_cart_from_shopping_list()
        self.add_items_in_cart_to_owned_items()
        
        if len(self.cart) > 0:
            trip_results = f"{self.name} buys {', '.join([item.name for item in self.cart])}"
        else:
            trip_results = f"{self.name} buys nothing."
            
        print(trip_results + '\n')
    
    def get_status(self):
        status = ""
        
        if len(self.shopping_list) > 0:
            status += f"{self.name} still needs {''.join([item.name for item in self.shopping_list])}\n"
        else:
            status += f"{self.name} doesn't need anything\n"
        
        if len(self.owned_items) > 0:
            status += f"{self.name} owns {''.join([item.name for item in self.owned_items])}\n"
        else:
            status += f"{self.name} owns nothing\n"
        
        return status
    
    def empty_cart(self):
        del self.cart[:]
    
    def remove_items_in_cart_from_shopping_list(self):
        for item in self.cart:
            self.shopping_list.remove(item)
    
    def add_items_in_cart_to_owned_items(self):
        for item in self.cart:
            self.owned_items.append(item)
```