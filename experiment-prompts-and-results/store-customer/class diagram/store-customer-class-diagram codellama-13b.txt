### System Prompt
You are an intelligent programming assistant.

### User Message
Generate complete and fully implemented Python code based on the following annotated PlantUML class diagram including the import of all necessary libraries. Do not implement "main" functionality:

@startuml store-customer

class Item {
    -name: str
    -price: float
    +__init__(name: str, price: float): None
    +__eq__(other: Item) -> bool: bool
}

class Store {
    -name: str
    -items: List[Item]
    +__init__(name: str): None
    +add_items(items: List[Item]): None
    ' adds items from "items" list to this store's list of items
    +has_item(item: Item) -> bool: bool
    ' checks if this store has a given item
    +print_items(): None
    ' prints all items this store has
}

class Customer {
    -name: str
    -owned_items: List[Item]
    -shopping_list: List[Item]
    -cart: List[Item]
    +__init__(name: str): None
    +add_to_shopping_list(items: List[Item]): None
    ' adds items from "items" list to this customer's shopping list if they are not already in this customer's list
    +add_to_cart(item: Item): None
    ' adds an item to this customer's cart and prints that they have added it to their cart
    +visit_store(store: Store): None
    ' makes this customer visit a store, adds all items from this customer's shopping list that are sold at that store has to the customer's cart, adds all items from cart to customer's "owned" list, removes all items in cart from shopping list, empties cart, prints what the customer bought at this store and prints customer's current status (from get_status)
    +get_status() -> str: str
    ' returns a string describing the items on the customer's shopping list and the items the customer owns
}

Store "1" -- "*" Item : has
Customer "1" -- "*" Item : needs
Customer "1" -- "*" Item : has
Customer "1" -- "*" Item : buys
Customer "1" -- "*" Store : visits

@enduml

### Assistant
```python
import typing as tp

class Item:
  def __init__(self, name: str, price: float) -> None:
      self._name = name
      self._price = price
  
  @property
  def name(self) -> str:
      return self._name
    
  @property
  def price(self) -> float:
      return self._price
      
  def __eq__(self, other: object) -> bool:
      if isinstance(other, Item):
          return self.name == other.name and self.price == other.price
      else:
          return False
        
class Store:
  def __init__(self, name: str) -> None:
      self._name = name
      self._items = []
          
  @property
  def name(self) -> str:
      return self._name
       
  @property
  def items(self) -> tp.List[Item]:
      return self._items
           
  def add_items(self, items: tp.List[Item]) -> None:
      for i in items:
          if i not in self._items:
              self._items.append(i)
              
  def has_item(self, item: Item) -> bool:
      return any([x==item for x in self._items])
            
  def print_items(self) -> None:
      print("Items available at", self._name+":")
      for i in self._items:
          print("\t"+str(i))
                  
class Customer:
  def __init__(self, name: str) -> None:
      self._name = name
      self._owned_items = []
      self._shopping_list = []
      self._cart = []
      
  @property
  def name(self) -> str:
      return self._name
               
  @property
  def owned_items(self) -> tp.List[Item]:
      return self._owned_items
                  
  @property
  def shopping_list(self) -> tp.List[Item]:
      return self._shopping_list
                  
  @property
  def cart(self) -> tp.List[Item]:
      return self._cart
                  
  def add_to_shopping_list(self, items: tp.List[Item]) -> None:
      for i in items:
          if i not in self._shopping_list:
              self._shopping_list.append(i)
              
  def add_to_cart(self, item: Item) -> None:
      if item in self._shopping_list:
          self._cart.append(item)
          print(f"{self._name} added '{item}' to their cart.")
          self._shopping_list.remove(item)
          
  def visit_store(self, store: Store) -> None:
      for i in [x for x in self._shopping_list if store.has_item(x)]:
          self._cart.append(i)
          self._owned_items.append(i)
          self._shopping_list.remove(i)
      self._cart = []
      print(f"{self._name} visited {store.name}. They purchased: ")
      for i in self._owned_items[-len(self._cart):]:
          print(f"\t{i}")
      print(f"Currently owning: ", end="")
      for i in self._owned_items[:-len(self._cart)]:
          print(f"{i}, ", end="")
      print(".")
      print(f"Shopping list: ", end="")
      for i in self._shopping_list:
          print(f"{i}, ", end="")
      print(".")
      
  def get_status(self) -> str:
      s = f"Owned Items: "
      for i in self._owned_items:
          s += f"{i}, "
      s += "\nShopping List:"
      for i in self._shopping_list:
          s += f"{i}, "
      return s
```