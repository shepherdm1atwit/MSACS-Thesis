### System Prompt
You are an intelligent programming assistant.

### User Message
Generate complete and fully implemented Python code based on the following annotated PlantUML activity diagram including the import of all necessary libraries. Do not implement "main" functionality:

@startuml Transaction
'"Transaction" class functionality
skinparam defaultTextAlignment center
start
partition "constructor(self, amount, type)" {
  :Create Transaction object with amount and type string;
}
stop
@enduml

@startuml BankAccount
'"BankAccount" class functionality
skinparam defaultTextAlignment center
start
partition "constructor(self, number, owner, balance)" {
    :Create BankAccount object with account number,
    owner, balance, and empty list transactions;
}
repeat :wait for method call;
  split
  partition "deposit(self, amount)" {
    :Add amount to balance;
    :Add new Transaction(amount, "Deposit")
    to transactions;
  }
  split again
  partition "withdraw(self, amount)" {
    if (balance >= amount) then (yes)
      :Subtract amount from balance;
      :Add new Transaction(amount, "Withdrawal")
      to transactions;
    else (no)
      :Return "Insufficient Funds";
    endif
  }
  end split
repeat while (object exists?) is (yes)
->no;
stop
@enduml

@startuml Customer
'"Customer" class functionality
skinparam defaultTextAlignment center
start
partition "constructor(self, name, account)" {
  :Create Customer object with name 
  and BankAccount account;
}
stop
@enduml

@startuml Bank
'"Bank" class functionality
skinparam defaultTextAlignment center
start
partition "constructor(self)" {
  :Create Bank object with 
  empty list customers;
}
repeat :wait for method call;
  split
  partition "add_customer(self, customer)" {
    :Add given Customer to customers;
  }
  split again
  partition "remove_customer(self, customer)" {
    :Remove given Customer from customers;
  }
  end split
repeat while (object exists?) is (yes)
->no;
stop
@enduml

### Assistant

```python
import uml
from typing import List

class Transaction:
    def __init__(self, amount: float, type: str):
        self.amount = amount
        self.type = type

class BankAccount:
    def __init__(self, number: int, owner: str, balance: float, transactions: List[Transaction]):
        self.number = number
        self.owner = owner
        self.balance = balance
        self.transactions = transactions
    
    def deposit(self, amount: float):
        self.balance += amount
        transaction = Transaction(amount, 'Deposit')
        self.transactions.append(transaction)
    
    def withdraw(self, amount: float):
        if self.balance < amount:
            return 'Insufficient funds'
        self.balance -= amount
        transaction = Transaction(amount, 'Withdrawal')
        self.transactions.append(transaction)

class Customer:
    def __init__(self, name: str, account: BankAccount):
        self.name = name
        self.account = account

class Bank:
    def __init__(self):
        self.customers = []

    def add_customer(self, customer: Customer):
        self.customers.append(customer)

    def remove_customer(self, customer: Customer):
        self.customers.remove(customer)

bank = Bank()
john = Customer('John', BankAccount(1234567890, 'John Smith', 1000.0, [Transaction(100.0, 'Deposit'), Transaction(50.0, 'Withdrawal')]))
bank.add_customer(john)
print(f'{john.account.balance=}') # prints 500.0
bank.remove_customer(john)
print(f'{john.account.balance=}') # prints 500.0
```