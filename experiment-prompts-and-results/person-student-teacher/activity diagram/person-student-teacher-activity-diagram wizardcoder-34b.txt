Below is an instruction that describes a task. Write a response that appropriately completes the request.

### Instruction:
Generate complete and fully implemented Python code based on the following annotated PlantUML activity diagram including the import of all necessary libraries:

@startuml Person
'"Person" class functionality
skinparam defaultTextAlignment center
start
partition constructor {
  :Create Person object with name and age;
}
repeat :wait for method call;
  partition introduce(self) {
    :Return introduction string
    containing name and age;
  }
repeat while (object exists?) is (yes)
->no;
stop
@enduml

@startuml Student
'"Student(Person)" class functionality
skinparam defaultTextAlignment center
start
partition constructor {
    :Create Student object with name and age 
    (from superclass), and grade;
}
repeat :wait for method call;
  split
  partition "study(self, hours)" {
    :Return string containing 
    name and hours studied;
  }
  split again
  partition "get_profile(self)" {
    :Return student profile string;
    'string in "Name: {self.name}\nAge: {self.age}\nGrade: {self.grade}" format
  }
  end split
repeat while (object exists?) is (yes)
->no;
stop
@enduml

@startuml Teacher
'"Teacher(Person)" class functionality
skinparam defaultTextAlignment center
start
partition constructor {
    :Create Teacher object with name and age 
    (from superclass), and subject taught;
}
repeat :wait for method call;
  split
  partition "teach(self, topic)" {
    :Return string containing name, topic 
    taught about, and subject taught;
  }
  split again
  partition "grade_student(self, student, grade)" {
    :Change given Student object's grade;
  }
  end split
repeat while (object exists?) is (yes)
->no;
stop
@enduml

### Response:

```python
import re

class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age
    
    def introduce(self):
        return f"Hello! My name is {self.name}, and I am {self.age} years old."

class Student(Person):
    def __init__(self, name, age, grade):
        super().__init__(name, age)
        self.grade = grade
    
    def study(self, hours):
        return f"I have been studying for {hours} hours today!"
    
    def get_profile(self):
        return f"Name: {self.name}\nAge: {self.age}\nGrade: {self.grade}"

class Teacher(Person):
    def __init__(self, name, age, subject):
        super().__init__(name, age)
        self.subject = subject
    
    def teach(self, topic):
        return f"I just taught my students about {topic}!"
    
    def grade_student(self, student, grade):
        student.grade = grade
        return f"{student.name}'s new grade is {student.grade}!"

if __name__ == "__main__":
    # Testing Person class
    person1 = Person("John", 30)
    print(person1.introduce())

    # Testing Student class
    student1 = Student("Jane", 25, "A")
    print(student1.study(4))
    print(student1.get_profile())

    # Testing Teacher class
    teacher1 = Teacher("Bob", 40, "Math")
    print(teacher1.teach("Algebra"))
    print(teacher1.grade_student(student1, "B+"))
```