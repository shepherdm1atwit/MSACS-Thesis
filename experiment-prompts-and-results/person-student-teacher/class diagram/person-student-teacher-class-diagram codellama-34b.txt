### System Prompt
You are an intelligent programming assistant.

### User Message
Generate complete and fully implemented Python code based on the following annotated PlantUML class diagram including the import of all necessary libraries:

@startuml person-student-teacher
class Person {
    -name: str
    -age: int
    +introduce(): str
    ' returns a string that introduces the person's name and age.
}

class Student {
    -grade: str
    +study(hours: int): str
    ' returns a string that states that this student studied for a certain number of hours (including student's name).
    +get_profile(): str
    ' returns a string representation of the student's profile including name, age, and grade
}

class Teacher {
    -subject: str
    +teach(topic: str): str
    ' returns a string that states that this teacher teaches about a given topic in their subject  (including teacher's name)
    +grade_student(student: Student, grade:str)
    ' changes a student's grade
}

Person <|-- Student
Person <|-- Teacher
@enduml

### Assistant

```python
import random
from typing import List

class Person:
    def __init__(self, name: str, age: int):
        self._name = name
        self._age = age
    
    @property
    def name(self) -> str:
        return self._name
    
    @property
    def age(self) -> int:
        return self._age
    
    def introduce(self) -> str:
        return f"Hello! My name is {self.name}, I am {self.age} years old."

class Student(Person):
    def __init__(self, name: str, age: int, grade: str):
        super().__init__(name=name, age=age)
        self._grade = grade
    
    @property
    def grade(self) -> str:
        return self._grade
    
    def study(self, hours: int) -> str:
        return f"{self.name} has been studying for {hours} hours today!"
    
    def get_profile(self) -> str:
        return f"Name: {self.name}\nAge: {self.age}\nGrade: {self.grade}"

class Teacher(Person):
    def __init__(self, name: str, age: int, subject: str):
        super().__init__(name=name, age=age)
        self._subject = subject
    
    @property
    def subject(self) -> str:
        return self._subject
    
    def teach(self, topic: str) -> str:
        return f"{self.name} is teaching about {topic} in {self.subject} right now!"
    
    def grade_student(self, student: Student, grade: str) -> None:
        student._grade = grade

def main() -> None:
    students: List[Student] = [
        Student("Alice", 10, "3rd"),
        Student("Bob", 9, "2nd")
    ]
    teachers: List[Teacher] = [
        Teacher("Mrs. Smith", 45, "Math"),
        Teacher("Mr. Johnson", 67, "Science")
    ]
    print([student.get_profile() for student in students])
    print([teacher.teach(random.choice(['fractions', 'cells'])) for teacher in teachers])
    for i in range(len(students)):
        teachers[i].grade_student(students[i], random.choice(['A+', 'B-', 'C+']))
    print([f"New Grade: {student.grade}" for student in students])

if __name__ == "__main__":
    main()
```